import { useEffect, useState } from "react";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";

import "./App.css";
import stickerGif from "./assets/sticker.gif";
import { init } from "@telegram-apps/sdk";

const API_URL = import.meta.env.VITE_API_URL;

// –î–æ–±–∞–≤–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
const generateRandomTelegramId = () => {
  // Telegram ID –æ–±—ã—á–Ω–æ 8-10 –∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä
  return Math.floor(Math.random() * 9000000000) + 1000000000;
};

const generateRandomUsername = () => {
  const adjectives = ["Happy", "Clever", "Funny", "Smart", "Cool"];
  const nouns = ["Monkey", "Panda", "Tiger", "Lion", "Bear"];
  const number = Math.floor(Math.random() * 1000);

  return `${adjectives[Math.floor(Math.random() * adjectives.length)]}${
    nouns[Math.floor(Math.random() * nouns.length)]
  }${number}`;
};

function MainPage() {
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [isError, setIsError] = useState(false);

  const sendUserDataHandler = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`${API_URL}/user`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          telegramId: generateRandomTelegramId(),
          username: generateRandomUsername(),
        }),
      });

      const data = await response.json();
      if (data.message === "success") {
        setIsSuccess(true);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
      setIsError(true);
    } finally {
      setIsLoading(false);
    }
  };

  if (isSuccess) {
    return (
      <div>
        <h1>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ö–æ—Ä–æ—à–∞—è –æ–±–µ–∑—å—è–Ω–∞!</h1>
        <div className="gif-container">
          <img src={stickerGif} alt="sticker" />
        </div>
      </div>
    );
  }

  if (isError) {
    return <div>–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</div>;
  }

  return (
    <div>
      <h1>–í—ã –ª—é–±–∏—Ç–µ —Å–ø–∞—Ç—å –∏ –∫—É—à–∞—Ç—å?</h1>
      <button
        onClick={sendUserDataHandler}
        className="button"
        disabled={isLoading}
      >
        {isLoading ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç..." : "–î–∞"}
        {isLoading && <div className="button-spinner" />}
      </button>
    </div>
  );
}

function App() {
  const [isTelegram, setIsTelegram] = useState(false);

  useEffect(() => {
    init();
    if (window.Telegram?.WebApp) {
      const app = window.Telegram.WebApp;
      app.ready();
      app.expand();
      setIsTelegram(true);
    }
  }, []);

  if (!isTelegram) {
    return (
      <div style={{ textAlign: "center", padding: "20px" }}>
        <h2>üöÄ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Telegram</h2>
        <p>–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Mini Apps.</p>
        <button onClick={() => window.open("https://t.me/rushupBot", "_blank")}>
          –û—Ç–∫—Ä—ã—Ç—å –≤ telegram
        </button>
      </div>
    );
  }

  return (
    <BrowserRouter>
      <Routes>
        <Route path="/main" element={<MainPage />} />
        <Route path="*" element={<Navigate to="/main" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;
